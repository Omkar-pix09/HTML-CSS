1. Selectors
Selectors are used to target HTML elements that you want to style.

Type Selector: Selects all elements of a given type.

CSS
p {
    color: blue;
}
Class Selector: Selects all elements with a given class.

CSS
.my-class {
    font-size: 20px;
}
ID Selector: Selects an element with a given ID.

CSS
#my-id {
    margin: 10px;
}
Attribute Selector: Selects elements with a specific attribute.

CSS
a[href] {
    text-decoration: none;
}
2. Box Model
The box model represents the structure of elements on a web page. It includes margins, borders, padding, and the actual content.

Content: The actual content of the box, where text and images appear.
Padding: Clears an area around the content. The padding is transparent.
Border: A border that goes around the padding and content.
Margin: Clears an area outside the border. The margin is also transparent.
CSS
.box {
    width: 300px;
    padding: 20px;
    border: 5px solid black;
    margin: 10px;
}
3. Colors
You can set colors using names, HEX values, RGB, RGBA, HSL, and HSLA.

Color Names:

CSS
h1 {
    color: red;
}
HEX Values:

CSS
p {
    color: #ff0000;
}
RGB/RGBA:

CSS
div {
    background-color: rgb(255, 0, 0);
    border-color: rgba(0, 0, 0, 0.5);
}
HSL/HSLA:

CSS
span {
    color: hsl(0, 100%, 50%);
    background: hsla(0, 100%, 50%, 0.3);
}
4. Typography
Typography controls the appearance of text.

Font Family:

CSS
body {
    font-family: Arial, sans-serif;
}
Font Size:

CSS
h1 {
    font-size: 2em;
}
Font Weight:

CSS
p {
    font-weight: bold;
}
Line Height:

CSS
p {
    line-height: 1.5;
}
5. Backgrounds
CSS allows you to set background colors, images, and other properties.

Background Color:

CSS
body {
    background-color: #f4f4f4;
}
Background Image:

CSS
.header {
    background-image: url('header-bg.jpg');
    background-size: cover;
    background-position: center;
}
6. Positioning
CSS positioning allows you to control the layout of elements on a page.

Static Positioning: Default positioning.

CSS
.static-element {
    position: static;
}
Relative Positioning: Positioned relative to its normal position.

CSS
.relative-element {
    position: relative;
    top: 10px;
    left: 10px;
}
Absolute Positioning: Positioned relative to its nearest positioned ancestor.

CSS
.absolute-element {
    position: absolute;
    top: 50px;
    left: 50px;
}
Fixed Positioning: Positioned relative to the browser window.

CSS
.fixed-element {
    position: fixed;
    bottom: 0;
    right: 0;
}
Sticky Positioning: Switches between relative and fixed positioning depending on the scroll position.

CSS
.sticky-element {
    position: sticky;
    top: 0;
}
7. Flexbox
Flexbox is a layout model that allows you to design a flexible and efficient layout structure.

Container:

CSS
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
}
Items:

CSS
.flex-item {
    flex: 1;
    padding: 10px;
}
8. Grid
CSS Grid Layout is a two-dimensional layout system for the web.

Container:

CSS
.grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
}
Items:

CSS
.grid-item {
    background-color: #ccc;
    padding: 20px;
    text-align: center;
}
